<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/* Author: Anand Prakash */


/* Global constant values */
const int leader_bot_id          = 0;
const int NO_OF_SLAVE_BOTS       = 2;
const int LEADER_BOT_OFFSET      = 0;
const int MAX_LOGICAL_ID         = 99;



/* Physical Bot IDs of each bot */
typedef int[1,NO_OF_SLAVE_BOTS] fbid_t; 


typedef struct
{
    int p_id; // Physical ID of the robot. This cannot be changed.
    int l_id; // Logical ID of the robot assigned by master. It is configurable.
} rmi;

/* Master bot register to store the bot IDs of all the associated followers. 
   Add by 1 to include leader bot.
*/
rmi master_bot_reg[NO_OF_SLAVE_BOTS + 1];

/* Synchronized events for regsitering the robots 
   Added 1 to include the master bot 
*/
chan event_send_bot_info[NO_OF_SLAVE_BOTS + 1], master_ack[NO_OF_SLAVE_BOTS + 1], 
        bot_sync[NO_OF_SLAVE_BOTS + 1], move_bot[NO_OF_SLAVE_BOTS + 1],
        response[NO_OF_SLAVE_BOTS + 1], command[NO_OF_SLAVE_BOTS + 1];

/* Global master registry index */
int master_reg_index = 0;
/* Robot count */
int reg_bots = 0;
int bot_in_sync = 0;
int bot_in_motion = 0;

void initializeMaster(int master_bot_id) {
    master_bot_reg[LEADER_BOT_OFFSET].p_id = master_bot_id;
    master_bot_reg[LEADER_BOT_OFFSET].l_id = MAX_LOGICAL_ID - master_bot_id;
    master_reg_index++;
}

bool checkDuplicateEntry(fbid_t follower_id) {
    int index = 0;
    for(index = 0; index &lt; NO_OF_SLAVE_BOTS + 1; index++) {
        if(master_bot_reg[index].p_id == follower_id) {
            return true;
        }
    }
    return false;
}

void setBotInMotion(){
    bot_in_motion++;
}


void registerBotDetails(fbid_t follower_id) {
    bool entryAvailable = checkDuplicateEntry(follower_id);
    if (entryAvailable == false) {
        master_bot_reg[master_reg_index].p_id = follower_id;
        master_bot_reg[master_reg_index].l_id = MAX_LOGICAL_ID - follower_id;
        master_reg_index++;
        reg_bots++;
    }
}
</declaration>
	<template>
		<name x="5" y="5">master_registry</name>
		<declaration>// Place local declarations here.
clock t;</declaration>
		<location id="id0" x="-3238" y="-3510">
			<name x="-3248" y="-3544">ready</name>
		</location>
		<location id="id1" x="-2687" y="-3408">
			<name x="-2662" y="-3417">register_bots</name>
		</location>
		<location id="id2" x="-2975" y="-3510">
			<name x="-3043" y="-3553">wait_to_register_bot</name>
		</location>
		<location id="id3" x="-2687" y="-3290">
			<name x="-2669" y="-3315">sync_bots</name>
		</location>
		<location id="id4" x="-2992" y="-3289">
			<name x="-3119" y="-3315">send_command</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-2932" y="-3213">bot_in_motion != bot_in_sync</label>
			<label kind="assignment" x="-2856" y="-3238">t := 0</label>
			<nail x="-2949" y="-3221"/>
			<nail x="-2728" y="-3221"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="select" x="-3153" y="-3399">b_id : fbid_t</label>
			<label kind="synchronisation" x="-3153" y="-3373">event_send_bot_info[b_id]?</label>
			<nail x="-3170" y="-3289"/>
			<nail x="-3170" y="-3433"/>
			<nail x="-2975" y="-3433"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="select" x="-2813" y="-3315">b_id : fbid_t</label>
			<label kind="guard" x="-2958" y="-3281">reg_bots == bot_in_sync and t &gt; 5</label>
			<label kind="synchronisation" x="-2949" y="-3315">move_bot[b_id]!</label>
			<label kind="assignment" x="-2907" y="-3264">setBotInMotion(), t := 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-2456" y="-3230">fb_id :fbid_t</label>
			<label kind="guard" x="-2456" y="-3264">reg_bots != bot_in_sync</label>
			<label kind="synchronisation" x="-2456" y="-3247">bot_sync[fb_id]!</label>
			<label kind="assignment" x="-2456" y="-3281">bot_in_sync = bot_in_sync + 1, t := 0</label>
			<nail x="-2686" y="-3213"/>
			<nail x="-2465" y="-3213"/>
			<nail x="-2465" y="-3289"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-2677" y="-3365">reg_bots == NO_OF_SLAVE_BOTS</label>
			<label kind="assignment" x="-2677" y="-3349">t := 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-2949" y="-3391">reg_bots != NO_OF_SLAVE_BOTS</label>
			<label kind="assignment" x="-2864" y="-3425">t := 0</label>
			<nail x="-2976" y="-3408"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select" x="-3026" y="-3603">b_id : fbid_t</label>
			<label kind="guard" x="-2915" y="-3604">t &gt; 10</label>
			<label kind="synchronisation" x="-3077" y="-3637">event_send_bot_info[b_id]?</label>
			<label kind="assignment" x="-2915" y="-3587">t := 0</label>
			<nail x="-2857" y="-3561"/>
			<nail x="-2857" y="-3612"/>
			<nail x="-3095" y="-3612"/>
			<nail x="-3095" y="-3561"/>
			<nail x="-3078" y="-3553"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="select" x="-2677" y="-3459">id : fbid_t</label>
			<label kind="guard" x="-2677" y="-3527">t &gt; 10</label>
			<label kind="synchronisation" x="-2679" y="-3485">master_ack[id]!</label>
			<label kind="assignment" x="-2679" y="-3510">registerBotDetails(id), t := 0</label>
			<nail x="-2687" y="-3510"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-3144" y="-3537">t &gt; 10</label>
			<label kind="assignment" x="-3204" y="-3502">initializeMaster(leader_bot_id),
t := 0</label>
		</transition>
	</template>
	<template>
		<name>slave_registry</name>
		<parameter>const fbid_t bot_id</parameter>
		<declaration>// Place global declarations here for slave bot registry.

clock t;
int attempt = 0;
int associated_leader_l_id = -1;

rmi follower_bot_reg[NO_OF_SLAVE_BOTS + 1];


void associateMaster(int bot_index){
    int index = 0;
    for(index = 0; index &lt; NO_OF_SLAVE_BOTS + 1; index++) {
        follower_bot_reg[index].p_id = master_bot_reg[index].p_id;
        follower_bot_reg[index].l_id = master_bot_reg[index].l_id;
    }
    /* 0th entry is for the master robot */
    associated_leader_l_id = master_bot_reg[0].l_id;
}



</declaration>
		<location id="id5" x="-13693" y="-12996">
			<name x="-13752" y="-13005">start</name>
		</location>
		<location id="id6" x="-13302" y="-12996">
			<name x="-13285" y="-13005">register</name>
		</location>
		<location id="id7" x="-13302" y="-12869">
			<name x="-13276" y="-12877">synchronize_bots</name>
		</location>
		<location id="id8" x="-13582" y="-12869">
			<name x="-13633" y="-12911">assign_master</name>
		</location>
		<location id="id9" x="-13302" y="-13090">
			<name x="-13285" y="-13099">registry_denied</name>
		</location>
		<location id="id10" x="-13582" y="-12784">
			<name x="-13634" y="-12758">master_request</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
			<nail x="-13693" y="-12784"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<nail x="-13693" y="-13090"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="-13574" y="-12818">t &gt; 5</label>
			<label kind="synchronisation" x="-13574" y="-12835">move_bot[bot_id]?</label>
			<label kind="assignment" x="-13523" y="-12818">t := 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-13293" y="-13064">attempt &gt; 5</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-13514" y="-12895">bot_sync[bot_id]?</label>
			<label kind="assignment" x="-13531" y="-12861">associateMaster(bot_id), t := 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-13531" y="-13073">attempt &lt; 5</label>
			<nail x="-13361" y="-13047"/>
			<nail x="-13633" y="-13047"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-13293" y="-12962">t &gt; 10</label>
			<label kind="synchronisation" x="-13293" y="-12945">master_ack[bot_id]?</label>
			<label kind="assignment" x="-13293" y="-12928">t := 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-13582" y="-12988">t &gt; 10</label>
			<label kind="synchronisation" x="-13591" y="-13022">event_send_bot_info[bot_id]!</label>
			<label kind="assignment" x="-13523" y="-12988">attempt++,
t := 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system master_registry, slave_registry;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
